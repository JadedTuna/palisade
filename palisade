#!/usr/bin/env python3
import click

@click.group()
def cli():
  pass

@cli.command()
@click.argument('file')
@click.option('--p-tokens', is_flag=True, help='print tokens')
@click.option('--p-parse', is_flag=True, help='print AST after parsing')
@click.option('--p-symbolize', is_flag=True, help='print AST after symbolize')
@click.option('--p-type-annot', is_flag=True, help='print AST after type-annotation')
@click.option('--p-sec-labels', is_flag=True, help='print AST after assigning security labels')
@click.option('--p-type-check', is_flag=True, help='print AST after type-checking')
@click.option('--explicit-flows/--no-explicit-flows', default=True,
  help='perform explicit flows check')
@click.option('--implicit-flows/--no-implicit-flows', default=True,
  help='perform implicit flows check')
def compile(file, p_tokens, p_parse, p_symbolize, p_type_annot, p_sec_labels,
            p_type_check, explicit_flows, implicit_flows):
  '''Compile a given file and perform security checks'''
  from lib.utils import pprint
  from tokenizer import Tokenizer
  from parser import Parser
  from symbolize import symbolize
  from type_check import type_annotate, type_check
  from security import assign_security_labels
  from debug import debug_ast
  from lib.ast import HIGH, LOW

  with open(file) as fp:
    SRC = fp.read()

  tokenizer = Tokenizer(SRC)
  tokenizer.tokenize()
  if p_tokens: pprint(tokenizer.tokens)

  parser = Parser(tokenizer.tokens)
  ast = parser.parse()
  if p_parse: pprint(ast)

  ast = symbolize(ast, ast.symtab)
  if p_symbolize: pprint(ast)
  
  ast = type_annotate(ast)
  if p_type_annot: pprint(ast)

  # seclabel pass runs before type-checking, to prevent potential
  # side-channel information leakage (type of secure variable)
  ast = assign_security_labels(ast)
  if p_sec_labels: pprint(ast)

  debug_ast(ast)

  if explicit_flows:
    from security import check_explicit_flows
    check_explicit_flows(ast)
  if implicit_flows:
    from security import check_implicit_flows
    check_implicit_flows(ast, LOW)

  ast = type_check(ast)
  if p_type_check: pprint(ast)

if __name__ == '__main__':
  cli()
