#!/usr/bin/env python3
import click
TEST_ORDER = [
  'basic1',
  'basic2',
  'complex1',
  'error1',
  'explicit1',
  'explicit2',
  'implicit_if1',
  'implicit_if2',
  'implicit_while',
  'implicit_throw',
  'implicit_array',
  'functions1'
]

@click.group()
def cli():
  pass

@cli.command()
@click.option('-v', is_flag=True, help='verbose output')
def test(v):
  '''Run tests on the compiler'''
  import subprocess
  from lib.utils import blue, yellow, green, red, cyan
  from pathlib import Path

  fs_files = {f.stem for f in Path('tests/').glob('*.pls')}
  missing_from_order = fs_files - set(TEST_ORDER)
  missing_from_fs = set(TEST_ORDER) - fs_files
  if missing_from_order:
    print(f'The following test files do not have order specified and will not be run')
    for file in sorted(missing_from_order):
      print(f'- {file}')
    print()
  if missing_from_fs:
    print(f'The following test files do not exist on the filesystem')
    for file in sorted(missing_from_fs):
      print(f'- {file}')
    print()
    exit(1)

  indent = ' '*4
  border_length = 80
  idx = 1
  for test in TEST_ORDER:
    start_border_length = border_length-len(str(idx))
    end_border_length = start_border_length+len(str(idx))+2
    with open(f'./tests/{test}.pls') as f:
        src = f.read()
    actual = subprocess.run(['./palisade', 'compile', f'./tests/{test}.pls'], capture_output=True).stdout.decode()
    with open(f'./tests/{test}.out') as f:
        expected = f.read()
    success = expected == actual
    if v or not success:
      if not v: print() # start newline after the dots
      if v: print(f'{blue('---\n---\n---')}')
      print(f'{blue('--- running test')}', yellow(idx), blue('-'*start_border_length), '\n')
      print(cyan(' - test code -'), f'\n{indent}{src.replace('\n', f'\n{indent}')}', '\n')
      print(cyan(' - expected output -'), f'\n{indent}', expected.replace('\n', f'\n{indent}'))
      print(cyan(' - actual output -'), f'\n{indent}', actual.replace('\n', f'\n{indent}'))
      print(blue('---'), green('test passed') if success else red('test failed'), blue('-'*end_border_length))
      # print(repr(expected))
      # print(repr(actual))
    else:
      print(green('.'), end='', flush=True)
    idx += 1
  print()

@cli.command()
@click.argument('file')
@click.option('--color/--no-color', default=True,
  help='colorize output')
@click.option('--p-tokens', is_flag=True, help='print tokens')
@click.option('--p-parse', is_flag=True, help='print AST after parsing')
@click.option('--p-symbolize', is_flag=True, help='print AST after symbolize')
@click.option('--p-type-annot', is_flag=True, help='print AST after type-annotation')
@click.option('--p-sec-labels', is_flag=True, help='print AST after assigning security labels')
@click.option('--p-type-check', is_flag=True, help='print AST after type-checking')
@click.option('--explicit-flows/--no-explicit-flows', default=True,
  help='perform explicit flows check')
@click.option('--implicit-flows/--no-implicit-flows', default=True,
  help='perform implicit flows check')
def compile(file, color, p_tokens, p_parse, p_symbolize, p_type_annot, p_sec_labels,
            p_type_check, explicit_flows, implicit_flows):
  '''Compile a given file and perform security checks'''
  from lib.utils import pprint, report_security_error_cont, report_note, green, red, yellow
  from tokenizer import Tokenizer
  from parser import Parser
  from symbolize import symbolize
  from type_check import type_annotate, type_check
  from security import assign_security_labels
  from debug import debug_ast
  from lib.ast import HIGH, LOW, EGlobal

  if not color:
    # monkeypatch style to disable color
    click.style = lambda s, *args, **kwargs: s

  with open(file) as fp:
    SRC = fp.read()

  tokenizer = Tokenizer(SRC)
  tokenizer.tokenize()
  if p_tokens: pprint(tokenizer.tokens)

  parser = Parser(tokenizer.tokens)
  ast = parser.parse()
  if p_parse: pprint(ast)

  ast = symbolize(ast, ast.symtab)
  if p_symbolize: pprint(ast)
  
  ast = type_annotate(ast)
  if p_type_annot: pprint(ast)

  # seclabel pass runs before type-checking, to prevent potential
  # side-channel information leakage (type of secure variable)
  ast = assign_security_labels(ast)
  if p_sec_labels: pprint(ast)

  debug_ast(ast)

  if explicit_flows:
    from security import check_explicit_flows
    check_explicit_flows(ast)
  if implicit_flows:
    from security import check_implicit_flows
    check_implicit_flows(ast, LOW)

  #ast = type_check(ast)
  if p_type_check: pprint(ast)

  # check flow analysis results
  count = 1
  for out, org_sec in ast.outputs.values():
    if(out.secure != org_sec):
      print(red(f'> output {count}.'))
      report_security_error_cont(f"The ouput variable {red(out.name)} should be {yellow(org_sec)} - but was {yellow(out.secure)}", out.span)
    else:
      print(green(f'> output {count}.'))
      print(f"The ouput variable {green(out.name)} had the expected security level")
    print()
    count += 1

if __name__ == '__main__':
  cli()
